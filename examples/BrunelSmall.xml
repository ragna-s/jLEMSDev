<LemsLite>
	<DiscreteUpdateComponent name="IaF_curr_alpha">
	    <Interface>
	        <InputEventPort name="inhibitory-in">
	                <Parameter name="weight"/>
	        </InputEventPort>
	        <InputEventPort name="excitatory-in">
	                <Parameter name="weight"/>
	        </InputEventPort>
	        <OutputEventPort name="spikes-out"/>
	        <!--
	        <RecordableVariable name="tIn"/>
	        <RecordableVariable name="tEx"/> -->
	        <RecordableVariable name="v"/>
	    </Interface>
	    <State>
	        <StateVariable name="v"/>
	        <StateVariable name="ye"/>
	        <StateVariable name="yi"/>
	        <StateVariable name="ge"/>
	        <StateVariable name="gi"/>
	        <StateVariable name="tEx"/>
	        <StateVariable name="tIn"/>
	    </State>
	    <Step>
	        <Var name="gtot" value="((ge - gi) + 0.0)"/>
	        <Var name="d_ye_dt" value="(0.0 - (1.0 * (ye / 1.0E-4)))"/>
	        <Var name="d_yi_dt" value="(0.0 - (1.0 * (yi / 1.0E-4)))"/>
	        <Var name="d_ge_dt" value="(((1.0E-11 * ye) - ge) / 1.0E-4)"/>
	        <Var name="d_gi_dt" value="(((1.0E-11 * yi) - gi) / 1.0E-4)"/>
	        <Var name="d_v_dt" value="((gtot / 1.0E-11) - ((v - 0.0) / 0.02))"/>
	        <Update variable="ye" value="(ye + (d_ye_dt * dt))"/>
	        <Update variable="yi" value="(yi + (d_yi_dt * dt))"/>
	        <Update variable="ge" value="(ge + (d_ge_dt * dt))"/>
	        <Update variable="gi" value="(gi + (d_gi_dt * dt))"/>
	        <Update variable="v" value="(v + (d_v_dt * dt))"/>
	        <!--
	        <Output variable="tIn" value="tIn"/>
	        <Output variable="tEx" value="tEx"/> -->
	        <Output variable="v" value="v"/>
	    </Step>
	    <OnEvent port="inhibitory-in">
	        <IfCondition test="(t .gt. (tIn + 0.002))">
	            <Update variable="yi" value="(yi + 1 + weight)"/>
	            <Update variable="tIn" value="t"/>
	        </IfCondition>
	    </OnEvent>
	    <OnEvent port="excitatory-in">
	        <IfCondition test="(t .gt. (tEx + 0.002))">
	            <Update variable="ye" value="(ye + 1 + weight)"/>
	            <Update variable="tEx" value="t"/>
	        </IfCondition>
	    </OnEvent>
	    <OnCondition test="(v .gt. 0.02)">
	        <Update variable="v" value="0.0"/>
	        <Emit port="spikes-out"/>
	    </OnCondition>
	</DiscreteUpdateComponent>

	<!-- External Data-Sources -->

	<DataSources>

	    <!-- Pre-determined (Poisson) Input Spikes -->

	    <!-- Excitatory Input -->
	    <Array name="e_input_times">
	        <ListSource values="0.01, 0.02, 0.03, 0.04"/>
	    </Array>
	    <Array name="e_input_targets">
	        <ListSource values="0, 1, 2, 3"/>
	    </Array>
	    <Array name="e_input_weights">
	        <ListSource values="0.01, 0.01, 0.01, 0.01"/>
	    </Array>

	    <!-- Inhibitory Input -->
	    <Array name="i_input_times">
	         <ListSource values="0.02, 0.025, 0.026, 0.026"/>
	    </Array>
	    <Array name="i_input_targets">
	         <ListSource values="0, 1, 0, 1"/>
	    </Array>
	    <Array name="i_input_weights">
	          <ListSource values="0.01, 0.01, 0.01, 0.01"/>
	    </Array>



	    <!-- Initial Membrane Potential Values (v) -->

	    <File name="bruneldata/excitatory_initial_v.txt" id="excitatory_v" format="csv" delimiter=" "/>
	    <File name="bruneldata/inhibitory_initial_v.txt" id="inhibitory_v" format="csv" delimiter=" "/>
	    <Array name="excitatory_v">
	       <ListSource values="0.001, 0.002, 0.003, 0.004, 0.005"/>
	    </Array>
	    <Array name="inhibitory_v">
	          <ListSource values="0, 0"/>
	    </Array>



	    <!-- Population Projection Connectivity -->

	    <!-- Excitatory-to-Excitatory -->
	    <File name="bruneldata/E_to_E.txt" id="e_to_e" format="csv" delimiter=" "/>
	    <Array name="e_to_e_source">
	        <ListSource values="0, 1, 2, 3"/>
	    </Array>
	    <Array name="e_to_e_destination">
	        <ListSource values="1, 2, 3, 4"/>
	    </Array>
	    <Array name="e_to_e_weight">
	          <ListSource values="0.01, 0.01, 0.01, 0.01"/>
	    </Array>

	    <!-- Excitatory-to-Inhibitory -->
	    <Array name="e_to_i_source">
	        <ListSource values="0, 1, 2, 3, 4"/>
	    </Array>
	    <Array name="e_to_i_destination">
	        <ListSource values="0, 1, 0, 1, 0"/>
	    </Array>
	    <Array name="e_to_i_weight">
	          <ListSource values="0.01, 0.01, 0.01, 0.01, 0.01"/>
	    </Array>

	    <!-- Inhibitory-to-Inhibitory -->
	   
	    <Array name="i_to_i_source">
	       	<ListSource values="0, 1"/> 
	    </Array>
	    <Array name="i_to_i_destination">
	         	<ListSource values="1, 0"/> 
	    </Array>
	    <Array name="i_to_i_weight">
	        <ListSource values="0.01, 0.01"/>
	    </Array>

	    <!-- Inhibitory-to-Excitatory -->
	    <Array name="i_to_e_source">
	        <ListSource values="0, 1, 0, 1"/>
	    </Array>
	    <Array name="i_to_e_destination">
	       <ListSource values="1, 2, 3, 4"/>
	    </Array>
	    <Array name="i_to_e_weight">
	       <ListSource values="0.01, 0.01, 0.01, 0.01"/>
	    </Array>

	</DataSources>


	<!-- Population Definitions -->

	<!-- Excitatory Population -->
	<ComponentArray name="excitatory_IaF" component="IaF_curr_alpha" size="5">
	    <Initialize stateVariable="v" array="excitatory_v"/>
	    <Initialize stateVariable="ye" value="0"/>
	    <Initialize stateVariable="yi" value="0"/>
	    <Initialize stateVariable="ge" value="0"/>
	    <Initialize stateVariable="gi" value="0"/>
	    <Initialize stateVariable="tEx" value="-1"/>
	    <Initialize stateVariable="tIn" value="0"/>
	</ComponentArray>

	<!-- Inhibitory Population -->
	<ComponentArray name="inhibitory_IaF" component="IaF_curr_alpha" size="2">
	    <Initialize stateVariable="v" array="inhibitory_v"/>
	    <Initialize stateVariable="ye" value="0"/>
	    <Initialize stateVariable="yi" value="0"/>
	    <Initialize stateVariable="ge" value="0"/>
	    <Initialize stateVariable="gi" value="0"/>
	    <Initialize stateVariable="tEx" value="-1"/>
	    <Initialize stateVariable="tIn" value="0"/>
	</ComponentArray>



	<!-- Population Projections -->


	<!-- Excitatory Connections -->

	<!-- Excitatory-to-Excitatory -->
	<EventConnections name="connections_E_to_E" from="excitatory_IaF" to="excitatory_IaF">
	    <EventSource port="spikes-out"/><EventTarget port="excitatory-in"/>
	    <SourceTargetConnector>
	        <FromArrayConnector pre="e_to_e_source" post="e_to_e_destination"/>
	    </SourceTargetConnector>
	    <ConnectionProperties>
	        <Property name="weight" array="e_to_e_weight"/>
	        <Delay value="0.015"/>
	    </ConnectionProperties>
	</EventConnections>

	<!-- Excitatory-to-Inhibitory -->
	<EventConnections name="connections_E_to_I" from="excitatory_IaF" to="inhibitory_IaF">
	    <EventSource port="spikes-out"/><EventTarget port="excitatory-in"/>
	    <SourceTargetConnector>
	        <FromArrayConnector pre="e_to_i_source" post="e_to_i_destination"/>
	    </SourceTargetConnector>
	    <ConnectionProperties>
	        <Property name="weight" array="e_to_i_weight"/>
	        <Delay value="0.015"/>
	    </ConnectionProperties>
	</EventConnections>


	<!-- Inhibitory Connections -->

	<!-- Inhibitory-to-Inhibitory -->
	<EventConnections name="connections_I_to_I" from="inhibitory_IaF" to="inhibitory_IaF">
	    <EventSource port="spikes-out"/><EventTarget port="inhibitory-in"/>
	    <SourceTargetConnector>
	        <FromArrayConnector pre="i_to_i_source" post="i_to_i_destination"/>
	    </SourceTargetConnector>
	    <ConnectionProperties>
	        <Property name="weight" array="i_to_i_weight"/>
	        <Delay value="0.015"/>
	    </ConnectionProperties>
	</EventConnections>

	<!-- Inhibitory-to-Excitatory -->
	<EventConnections name="connections_I_to_E" from="inhibitory_IaF" to="excitatory_IaF">
	    <EventSource port="spikes-out"/><EventTarget port="inhibitory-in"/>
	    <SourceTargetConnector>
	        <FromArrayConnector pre="i_to_e_source" post="i_to_e_destination"/>
	    </SourceTargetConnector>
	    <ConnectionProperties>
	        <Property name="weight" array="i_to_e_weight"/>
	        <Delay value="0.015"/>
	    </ConnectionProperties>
	</EventConnections>



	<!-- Timed Inputs -->
 
	 <TimedEvents name="excitatory_inputs" to="excitatory_IaF" times="e_input_times" targets="e_input_targets">
	     <EventTarget port="excitatory-in"/>
	     
	      
	    <ConnectionProperties>
	     	 
	        <Property name="weight" array="e_input_weights"/>
	    </ConnectionProperties>
	</TimedEvents>
 

	<TimedEvents name="inhibitory_inputs" to="inhibitory_IaF" times="i_input_times" targets="i_input_targets">
		<EventTarget port="excitatory-in"/>
		 
	    <ConnectionProperties>
	        <Property name="weight" array="i_input_weights"/>
	    </ConnectionProperties>
	</TimedEvents>


	<Simulation name="Brunel2000" dt="0.1e-3" endTime="0.1">
	
    	  <Display interval="0.1" id="d1">
	            <VariableDisplay componentArray="excitatory_IaF" indices="0, 1, 2" variable="v" color="#ffff00"/>
	             <VariableDisplay componentArray="inhibitory_IaF" indices="0, 1" variable="v" color="#0000ff"/>
	   	</Display>
	   	 
	</Simulation>

</LemsLite>
